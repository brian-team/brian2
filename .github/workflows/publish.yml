name: Build and publish
on: [push, pull_request]

jobs:
  get_python_versions:
    name: "Determine Python versions"
    runs-on: ubuntu-latest
    outputs:
      min-python: ${{ steps.nep29.outputs.min-python }}
      max-python: ${{ steps.nep29.outputs.max-python }}
    steps:
      - name: "calculate versions according to NEP29"
        id: nep29
        uses: mstimberg/github-calc-nep29@a73481e4e8488a5fa0b3be70a385cc5206a261ba # v0.7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: [get_python_versions]
    name: Build ðŸŽ¡ on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, macOS-13, macOS-14 ]
    steps:
      - uses:  actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Set up Python 3.x
        uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: '3.x'
      - name: Install platformdirs
        run: python -m pip install platformdirs
      - name: Display cibuildwheel cache dir
        id: cibuildwheel-cache
        run: |
          from platformdirs import user_cache_path
          import os
  
          with open(os.getenv('GITHUB_OUTPUT'), 'w') as f:
            f.write(f"dir={str(user_cache_path(appname='cibuildwheel', appauthor='pypa'))}")
        shell: python
      - name: Cache cibuildwheel tools
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          path: ${{ steps.cibuildwheel-cache.outputs.dir }}
          key: ${{ runner.os }}-cibuildwheel
      - name: Build wheels
        uses: pypa/cibuildwheel@d04cacbc9866d432033b1d09142936e6a0e2121a # v2.23.2
        env:
          CIBW_PROJECT_REQUIRES_PYTHON: ">=${{ needs.get_python_versions.outputs.min-python }}"
          CIBW_ARCHS: auto64
          # Do not build for PyPy
          CIBW_SKIP: 'pp*'
          CIBW_TEST_COMMAND: python {project}/dev/continuous-integration/run_simple_test.py
          CIBW_TEST_REQUIRES: pytest
        with:
          output-dir: dist
      - name: store distribution ðŸ“¦
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: packages-${{ matrix.os }}
          path: dist

  build-linux:
    needs: [get_python_versions]
    name: Build ðŸŽ¡ and source ðŸ“¦ on ${{ matrix.config.image }}
    runs-on: ${{ matrix.config.image }}
    strategy:
      fail-fast: false
      matrix:
        config: [{arch: auto64, image: ubuntu-24.04},
                 {arch: aarch64, image: ubuntu-24.04-arm}] 
    steps:
      - uses:  actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Set up Python 3.x
        uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: '3.x'
      - name: Build source tarball
        run: |
          python -m pip install --upgrade pip build
          python -m build --sdist --config-setting=--formats=gztar --config-setting=--with-cython --config-setting=--fail-on-error
        if: matrix.config.arch == 'auto64'  
      - name: Install platformdirs
        run: python -m pip install platformdirs
      - name: Display cibuildwheel cache dir
        id: cibuildwheel-cache
        run: |
          from platformdirs import user_cache_path
          import os
  
          with open(os.getenv('GITHUB_OUTPUT'), 'w') as f:
            f.write(f"dir={str(user_cache_path(appname='cibuildwheel', appauthor='pypa'))}")
        shell: python
      - name: Cache cibuildwheel tools
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          path: ${{ steps.cibuildwheel-cache.outputs.dir }}
          key: ${{ matrix.config.image }}-${{ matrix.config.arch }}-cibuildwheel
      - name: Build wheels
        uses: pypa/cibuildwheel@d04cacbc9866d432033b1d09142936e6a0e2121a # v2.23.2
        env:
          CIBW_PROJECT_REQUIRES_PYTHON: ">=${{ needs.get_python_versions.outputs.min-python }}"
          CIBW_ARCHS_LINUX: ${{ matrix.config.arch }}
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_SKIP: 'pp* *-musllinux_aarch64'
          CIBW_TEST_COMMAND: python {project}/dev/continuous-integration/run_simple_test.py
          CIBW_TEST_REQUIRES: pytest
        with:
          output-dir: dist
      - name: store distribution ðŸ“¦
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: packages-linux-${{ matrix.config.arch }}
          path: dist

  deploy_dev:
    name: Publish development ðŸ“¦ to TestPyPI
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.repository == 'brian-team/brian2' && github.ref == 'refs/heads/master'
    environment: development_release
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    needs:
      - build
      - build-linux
    steps:
      - name: load distribution ðŸ“¦
        uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # v4.2.0
        with:
          pattern: packages-*
          merge-multiple: true
          path: dist/
      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
        with:
          repository-url: https://test.pypi.org/legacy/

  deploy:
    name: Publish release ðŸ“¦ to PyPI
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.repository == 'brian-team/brian2' && startsWith(github.ref, 'refs/tags')
    environment: release
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    needs:
      - build
      - build-linux
    steps:
      - name: load distribution ðŸ“¦
        uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # v4.2.0
        with:
          pattern: packages-*
          merge-multiple: true
          path: dist/
      - name: Publish distribution release ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
  
  build-docker:
    name: Build docker image
    runs-on: ubuntu-latest
    needs: build-linux
    # Skip everything for PR authors that do not have permission to access secrets
    if: ${{ github.event_name == 'push' || (github.event.pull_request.author_association == 'COLLABORATOR' || github.event.pull_request.author_association == 'OWNER') }}
    steps:
    - name: Checkout repository
      uses:  actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: false
      # https://github.com/actions/checkout/
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
      # https://github.com/docker/metadata-action
      with:
        images: |
          briansimulator/brian
          ghcr.io/brian-team/brian
        flavor: latest=true
        tags: |
          type=ref,event=tag
        labels: |
          org.opencontainers.image.title="Brian Docker Image"
          org.opencontainers.image.description="Docker image for Brian - a free, open source simulator for spiking neural networks"
          org.opencontainers.image.url=https://hub.docker.com/r/briansimulator/brian
          org.opencontainers.image.source=https://github.com/brian-team/brian2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      # https://github.com/docker/setup-qemu-action
      with:
        platforms: 'amd64,arm64'
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
      with: 
        cache-binary: false
      # https://github.com/docker/setup-buildx-action
    - name: Login to DockerHub
      if: ${{ github.event_name == 'push' && github.repository == 'brian-team/brian2' && github.actor != 'dependabot[bot]'}}
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      # https://github.com/docker/login-action
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GitHub Container Registry
      if: ${{ github.event_name == 'push' && github.repository == 'brian-team/brian2' && github.actor != 'dependabot[bot]'}}
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: load Linux x86 distribution ðŸ“¦
      uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # v4.2.0
      with:
        pattern: packages-linux-*
        merge-multiple: true
        path: packages
    - run: |
        mkdir dist
        cp packages/[Bb]rian2*cp312-manylinux*_x86_64.whl dist
        cp packages/[Bb]rian2*cp312-manylinux*_aarch64.whl dist
    - name: Build (and potentially push) the Docker image
      uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
      # https://github.com/docker/build-push-action
      with:
        context: .
        file: docker/Dockerfile
        build-args: |
            'BASE_IMAGE_TAG=3.12-bookworm'
        platforms: 'amd64,arm64'
        push: ${{ github.repository == 'brian-team/brian2' && startsWith(github.ref, 'refs/tags') && github.actor != 'dependabot[bot]'}}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    - name: Push docker image to dev repository
      if: ${{ github.repository == 'brian-team/brian2' && github.event_name == 'push' && !startsWith(github.ref, 'refs/tags') && github.actor != 'dependabot[bot]'}} 
      uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
      with:
        context: .
        file: docker/Dockerfile
        build-args: |
            'BASE_IMAGE_TAG=3.12-bookworm'
        platforms: 'amd64,arm64'
        push: true
        tags: |
            briansimulator/brian-dev:dev-${{ github.ref_name }}
            ghcr.io/brian-team/brian-dev:dev-${{ github.ref_name }}
        labels: ${{ steps.meta.outputs.labels }}
